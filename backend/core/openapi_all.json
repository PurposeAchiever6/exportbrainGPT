{
  "openapi": "3.0.2",
  "info": { "title": "FastAPI", "version": "0.1.0" },
  "paths": {
    "/brains/": {
      "get": {
        "tags": ["Brain"],
        "summary": "Brain Endpoint",
        "description": "Retrieve all brains for the current user.\n\n- `current_user`: The current authenticated user.\n- Returns a list of all brains registered for the user.\n\nThis endpoint retrieves all the brains associated with the current authenticated user. It returns a list of brains objects\ncontaining the brain ID and brain name for each brain.",
        "operationId": "brain_endpoint_brains__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "post": {
        "tags": ["Brain"],
        "summary": "Create Brain Endpoint",
        "description": "Create a new brain with given\n    name\n    status\n    model\n    max_tokens\n    temperature\nIn the brains table & in the brains_users table and put the creator user as 'Owner'",
        "operationId": "create_brain_endpoint_brains__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateBrainProperties" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/brains/default/": {
      "get": {
        "tags": ["Brain"],
        "summary": "Get Default Brain Endpoint",
        "description": "Retrieve the default brain for the current user. If the user doesnt have one, it creates one.\n\n- `current_user`: The current authenticated user.\n- Returns the default brain for the user.\n\nThis endpoint retrieves the default brain associated with the current authenticated user.\nThe default brain is defined as the brain marked as default in the brains_users table.",
        "operationId": "get_default_brain_endpoint_brains_default__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/brains/{brain_id}/": {
      "get": {
        "tags": ["Brain"],
        "summary": "Get Brain Endpoint",
        "description": "Retrieve details of a specific brain by brain ID.\n\n- `brain_id`: The ID of the brain to retrieve details for.\n- Returns the brain ID and its history.\n\nThis endpoint retrieves the details of a specific brain identified by the provided brain ID. It returns the brain ID and its\nhistory, which includes the brain messages exchanged in the brain.",
        "operationId": "get_brain_endpoint_brains__brain_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "put": {
        "tags": ["Brain"],
        "summary": "Update Brain Endpoint",
        "description": "Update an existing brain with new brain configuration",
        "operationId": "update_brain_endpoint_brains__brain_id___put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrainUpdatableProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/brains/{brain_id}/default": {
      "post": {
        "tags": ["Brain"],
        "summary": "Set As Default Brain Endpoint",
        "description": "Set a brain as default for the current user.",
        "operationId": "set_as_default_brain_endpoint_brains__brain_id__default_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/chat/healthz": {
      "get": {
        "tags": ["Health"],
        "summary": "Healthz",
        "operationId": "healthz_chat_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/chat": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get Chats",
        "description": "Retrieve all chats for the current user.\n\n- `current_user`: The current authenticated user.\n- Returns a list of all chats for the user.\n\nThis endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects\ncontaining the chat ID and chat name for each chat.",
        "operationId": "get_chats_chat_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "post": {
        "tags": ["Chat"],
        "summary": "Create Chat Handler",
        "description": "Create a new chat with initial chat messages.",
        "operationId": "create_chat_handler_chat_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateChatProperties" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/chat/{chat_id}": {
      "delete": {
        "tags": ["Chat"],
        "summary": "Delete Chat",
        "description": "Delete a specific chat by chat ID.",
        "operationId": "delete_chat_chat__chat_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Chat Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "chat_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/chat/{chat_id}/metadata": {
      "put": {
        "tags": ["Chat"],
        "summary": "Update Chat Metadata Handler",
        "description": "Update chat attributes",
        "operationId": "update_chat_metadata_handler_chat__chat_id__metadata_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Chat Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "chat_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatUpdatableProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Chat" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/chat/{chat_id}/question": {
      "post": {
        "tags": ["Chat"],
        "summary": "Create Question Handler",
        "description": "Add a new question to the chat.",
        "operationId": "create_question_handler_chat__chat_id__question_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Chat Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "chat_id",
            "in": "path"
          },
          {
            "description": "The ID of the brain",
            "required": true,
            "schema": {
              "title": "Brain Id",
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string", "format": "uuid" }
              ],
              "description": "The ID of the brain"
            },
            "name": "brain_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChatQuestion" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChatHistoryOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/chat/{chat_id}/question/stream": {
      "post": {
        "tags": ["Chat"],
        "summary": "Create Stream Question Handler",
        "operationId": "create_stream_question_handler_chat__chat_id__question_stream_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Chat Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "chat_id",
            "in": "path"
          },
          {
            "description": "The ID of the brain",
            "required": true,
            "schema": {
              "title": "Brain Id",
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string", "format": "uuid" }
              ],
              "description": "The ID of the brain"
            },
            "name": "brain_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChatQuestion" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/chat/{chat_id}/history": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get Chat History Handler",
        "operationId": "get_chat_history_handler_chat__chat_id__history_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Chat Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "chat_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Chat History Handler Chat  Chat Id  History Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetChatHistoryOutput"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/crawl/healthz": {
      "get": {
        "tags": ["Health"],
        "summary": "Healthz",
        "operationId": "healthz_crawl_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/crawl": {
      "post": {
        "tags": ["Crawl"],
        "summary": "Crawl Endpoint",
        "description": "Crawl a website and process the crawled data.",
        "operationId": "crawl_endpoint_crawl_post",
        "parameters": [
          {
            "description": "The ID of the brain",
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "description": "The ID of the brain",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Enable Summarization",
              "type": "boolean",
              "default": false
            },
            "name": "enable_summarization",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CrawlWebsite" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/explore/": {
      "get": {
        "tags": ["Explore"],
        "summary": "Explore Endpoint",
        "description": "Retrieve and explore unique user data vectors.",
        "operationId": "explore_endpoint_explore__get",
        "parameters": [
          {
            "description": "The ID of the brain",
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "description": "The ID of the brain",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/explore/{file_name}/": {
      "get": {
        "tags": ["Explore"],
        "summary": "Download Endpoint",
        "description": "Download a specific user file by file name.",
        "operationId": "download_endpoint_explore__file_name___get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "File Name", "type": "string" },
            "name": "file_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "delete": {
        "tags": ["Explore"],
        "summary": "Delete Endpoint",
        "description": "Delete a specific user file by file name.",
        "operationId": "delete_endpoint_explore__file_name___delete",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "File Name", "type": "string" },
            "name": "file_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint to check the status of the API.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "tags": ["Health"],
        "summary": "Healthz",
        "operationId": "healthz_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/upload/healthz": {
      "get": {
        "tags": ["Health"],
        "summary": "Healthz",
        "operationId": "healthz_upload_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/upload": {
      "post": {
        "tags": ["Upload"],
        "summary": "Upload File",
        "description": "Upload a file to the user's storage.\n\n- `file`: The file to be uploaded.\n- `enable_summarization`: Flag to enable summarization of the file's content.\n- `current_user`: The current authenticated user.\n- Returns the response message indicating the success or failure of the upload.\n\nThis endpoint allows users to upload files to their storage (brain). It checks the remaining free space in the user's storage (brain)\nand ensures that the file size does not exceed the maximum capacity. If the file is within the allowed size limit,\nit can optionally apply summarization to the file's content. The response message will indicate the status of the upload.",
        "operationId": "upload_file_upload_post",
        "parameters": [
          {
            "description": "The ID of the brain",
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "description": "The ID of the brain",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Enable Summarization",
              "type": "boolean",
              "default": false
            },
            "name": "enable_summarization",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/user": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Endpoint",
        "description": "Get user information and statistics.\n\n- `current_user`: The current authenticated user.\n- Returns the user's email, maximum brain size, current brain size, maximum requests number, requests statistics, and the current date.\n\nThis endpoint retrieves information and statistics about the authenticated user. It includes the user's email, maximum brain size,\ncurrent brain size, maximum requests number, requests statistics, and the current date. The brain size is calculated based on the\nuser's uploaded vectors, and the maximum brain size is obtained from the environment variables. The requests statistics provide\ninformation about the user's API usage.",
        "operationId": "get_user_endpoint_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/user/identity": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Identity Route",
        "description": "Get user identity.",
        "operationId": "get_user_identity_route_user_identity_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserIdentity" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "put": {
        "tags": ["User"],
        "summary": "Update User Identity Route",
        "description": "Update user identity.",
        "operationId": "update_user_identity_route_user_identity_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdatableProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserIdentity" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/api-key": {
      "post": {
        "tags": ["API Key"],
        "summary": "Create Api Key",
        "description": "Create new API key for the current user.\n\n- `current_user`: The current authenticated user.\n- Returns the newly created API key.\n\nThis endpoint generates a new API key for the current user. The API key is stored in the database and associated with\nthe user. It returns the newly created API key.",
        "operationId": "create_api_key_api_key_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiKey" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/api-key/{key_id}": {
      "delete": {
        "tags": ["API Key"],
        "summary": "Delete Api Key",
        "description": "Delete (deactivate) an API key for the current user.\n\n- `key_id`: The ID of the API key to delete.\n\nThis endpoint deactivates and deletes the specified API key associated with the current user. The API key is marked\nas inactive in the database.",
        "operationId": "delete_api_key_api_key__key_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Key Id", "type": "string" },
            "name": "key_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/api-keys": {
      "get": {
        "tags": ["API Key"],
        "summary": "Get Api Keys",
        "description": "Get all active API keys for the current user.\n\n- `current_user`: The current authenticated user.\n- Returns a list of active API keys with their IDs and creation times.\n\nThis endpoint retrieves all the active API keys associated with the current user. It returns a list of API key objects\ncontaining the key ID and creation time for each API key.",
        "operationId": "get_api_keys_api_keys_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Api Keys Api Keys Get",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ApiKeyInfo" }
                }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/brains/{brain_id}/subscription": {
      "get": {
        "tags": ["BrainSubscription"],
        "summary": "Get User Invitation",
        "description": "Get an invitation to a brain for a user. This function checks if the user\nhas been invited to the brain and returns the invitation status.",
        "operationId": "get_user_invitation_brains__brain_id__subscription_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "put": {
        "summary": "Update Brain Subscription",
        "operationId": "update_brain_subscription_brains__brain_id__subscription_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrainSubscriptionUpdatableProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "post": {
        "tags": ["BrainSubscription"],
        "summary": "Invite Users To Brain",
        "description": "Invite multiple users to a brain by their emails. This function creates\nor updates a brain subscription invitation for each user and sends an\ninvitation email to each user.",
        "operationId": "invite_users_to_brain_brains__brain_id__subscription_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "title": "Origin", "type": "string" },
            "name": "origin",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Users",
                "type": "array",
                "items": { "type": "object" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      },
      "delete": {
        "summary": "Remove User Subscription",
        "description": "Remove a user's subscription to a brain",
        "operationId": "remove_user_subscription_brains__brain_id__subscription_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/brains/{brain_id}/users": {
      "get": {
        "summary": "Get Brain Users",
        "description": "Get all users for a brain",
        "operationId": "get_brain_users_brains__brain_id__users_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }, { "AuthBearer": [] }]
      }
    },
    "/brains/{brain_id}/subscription/accept": {
      "post": {
        "tags": ["Brain"],
        "summary": "Accept Invitation",
        "description": "Accept an invitation to a brain for a user. This function removes the\ninvitation from the subscription invitations and adds the user to the\nbrain users.",
        "operationId": "accept_invitation_brains__brain_id__subscription_accept_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/brains/{brain_id}/subscription/decline": {
      "post": {
        "tags": ["Brain"],
        "summary": "Decline Invitation",
        "description": "Decline an invitation to a brain for a user. This function removes the\ninvitation from the subscription invitations.",
        "operationId": "decline_invitation_brains__brain_id__subscription_decline_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Brain Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "brain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/prompts": {
      "get": {
        "tags": ["Prompt"],
        "summary": "Get Prompts",
        "description": "Retrieve all public prompt",
        "operationId": "get_prompts_prompts_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Prompts Prompts Get",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Prompt" }
                }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      },
      "post": {
        "tags": ["Prompt"],
        "summary": "Create Prompt Route",
        "description": "Create a prompt by its id",
        "operationId": "create_prompt_route_prompts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Prompt" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    },
    "/prompts/{prompt_id}": {
      "get": {
        "tags": ["Prompt"],
        "summary": "Get Prompt",
        "description": "Retrieve a prompt by its id",
        "operationId": "get_prompt_prompts__prompt_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Prompt Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "prompt_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Prompt" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      },
      "put": {
        "tags": ["Prompt"],
        "summary": "Update Prompt",
        "description": "Update a prompt by its id",
        "operationId": "update_prompt_prompts__prompt_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Prompt Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "prompt_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptUpdatableProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Prompt" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AuthBearer": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKey": {
        "title": "ApiKey",
        "required": ["api_key", "key_id"],
        "type": "object",
        "properties": {
          "api_key": { "title": "Api Key", "type": "string" },
          "key_id": { "title": "Key Id", "type": "string" }
        }
      },
      "ApiKeyInfo": {
        "title": "ApiKeyInfo",
        "required": ["key_id", "creation_time"],
        "type": "object",
        "properties": {
          "key_id": { "title": "Key Id", "type": "string" },
          "creation_time": { "title": "Creation Time", "type": "string" }
        }
      },
      "Body_upload_file_upload_post": {
        "title": "Body_upload_file_upload_post",
        "required": ["uploadFile"],
        "type": "object",
        "properties": {
          "uploadFile": {
            "title": "Uploadfile",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "BrainSubscriptionUpdatableProperties": {
        "title": "BrainSubscriptionUpdatableProperties",
        "required": ["email"],
        "type": "object",
        "properties": {
          "rights": { "title": "Rights", "type": "string" },
          "email": { "title": "Email", "type": "string" }
        }
      },
      "BrainUpdatableProperties": {
        "title": "BrainUpdatableProperties",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "temperature": { "title": "Temperature", "type": "number" },
          "model": { "title": "Model", "type": "string" },
          "max_tokens": { "title": "Max Tokens", "type": "integer" },
          "openai_api_key": { "title": "Openai Api Key", "type": "string" },
          "status": { "title": "Status", "type": "string" },
          "prompt_id": {
            "title": "Prompt Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Chat": {
        "title": "Chat",
        "required": ["chat_id", "user_id", "creation_time", "chat_name"],
        "type": "object",
        "properties": {
          "chat_id": { "title": "Chat Id", "type": "string" },
          "user_id": { "title": "User Id", "type": "string" },
          "creation_time": { "title": "Creation Time", "type": "string" },
          "chat_name": { "title": "Chat Name", "type": "string" }
        }
      },
      "ChatQuestion": {
        "title": "ChatQuestion",
        "required": ["question"],
        "type": "object",
        "properties": {
          "question": { "title": "Question", "type": "string" },
          "model": { "title": "Model", "type": "string" },
          "temperature": { "title": "Temperature", "type": "number" },
          "max_tokens": { "title": "Max Tokens", "type": "integer" },
          "brain_id": {
            "title": "Brain Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ChatUpdatableProperties": {
        "title": "ChatUpdatableProperties",
        "type": "object",
        "properties": {
          "chat_name": { "title": "Chat Name", "type": "string" }
        }
      },
      "CrawlWebsite": {
        "title": "CrawlWebsite",
        "required": ["url"],
        "type": "object",
        "properties": {
          "url": { "title": "Url", "type": "string" },
          "js": { "title": "Js", "type": "boolean", "default": false },
          "depth": { "title": "Depth", "type": "integer", "default": 1 },
          "max_pages": {
            "title": "Max Pages",
            "type": "integer",
            "default": 100
          },
          "max_time": { "title": "Max Time", "type": "integer", "default": 60 }
        }
      },
      "CreateBrainProperties": {
        "title": "CreateBrainProperties",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "default": "Default brain"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "default": "This is a description"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "default": "private"
          },
          "model": {
            "title": "Model",
            "type": "string",
            "default": "gpt-3.5-turbo"
          },
          "temperature": {
            "title": "Temperature",
            "type": "number",
            "default": 0.0
          },
          "max_tokens": {
            "title": "Max Tokens",
            "type": "integer",
            "default": 256
          },
          "openai_api_key": { "title": "Openai Api Key", "type": "string" },
          "prompt_id": {
            "title": "Prompt Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreateChatProperties": {
        "title": "CreateChatProperties",
        "required": ["name"],
        "type": "object",
        "properties": { "name": { "title": "Name", "type": "string" } }
      },
      "CreatePromptProperties": {
        "title": "CreatePromptProperties",
        "required": ["title", "content"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string" },
          "content": { "title": "Content", "type": "string" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/PromptStatusEnum" }],
            "default": "private"
          }
        },
        "description": "Properties that can be received on prompt creation"
      },
      "GetChatHistoryOutput": {
        "title": "GetChatHistoryOutput",
        "required": [
          "chat_id",
          "message_id",
          "user_message",
          "assistant",
          "message_time"
        ],
        "type": "object",
        "properties": {
          "chat_id": { "title": "Chat Id", "type": "string", "format": "uuid" },
          "message_id": {
            "title": "Message Id",
            "type": "string",
            "format": "uuid"
          },
          "user_message": { "title": "User Message", "type": "string" },
          "assistant": { "title": "Assistant", "type": "string" },
          "message_time": { "title": "Message Time", "type": "string" },
          "prompt_title": { "title": "Prompt Title", "type": "string" },
          "brain_name": { "title": "Brain Name", "type": "string" }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationError" }
          }
        }
      },
      "Prompt": {
        "title": "Prompt",
        "required": ["title", "content", "id"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string" },
          "content": { "title": "Content", "type": "string" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/PromptStatusEnum" }],
            "default": "private"
          },
          "id": { "title": "Id", "type": "string", "format": "uuid" }
        }
      },
      "PromptStatusEnum": {
        "title": "PromptStatusEnum",
        "enum": ["private", "public"],
        "type": "string",
        "description": "An enumeration."
      },
      "PromptUpdatableProperties": {
        "title": "PromptUpdatableProperties",
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string" },
          "content": { "title": "Content", "type": "string" },
          "status": { "$ref": "#/components/schemas/PromptStatusEnum" }
        },
        "description": "Properties that can be received on prompt update"
      },
      "UserIdentity": {
        "title": "UserIdentity",
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string", "format": "uuid" },
          "email": { "title": "Email", "type": "string" },
          "openai_api_key": { "title": "Openai Api Key", "type": "string" }
        }
      },
      "UserUpdatableProperties": {
        "title": "UserUpdatableProperties",
        "type": "object",
        "properties": {
          "openai_api_key": { "title": "Openai Api Key", "type": "string" }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      }
    },
    "securitySchemes": { "AuthBearer": { "type": "http", "scheme": "bearer" } }
  }
}
